[{"C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\index.js":"1","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\App.js":"2","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\pages\\Profile.js":"3","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\pages\\Listings.js":"4","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\pages\\Home.js":"5","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\components\\NavigationBar.js":"6","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\pages\\Login.js":"7","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\routers\\PrivateRoute.js":"8","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\pages\\Register.js":"9","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\pages\\Dash.js":"10","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\utils\\AuthContext\\index.js":"11","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\utils\\API.js":"12","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\components\\Cooks.js":"13","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\components\\CookInfo.js":"14","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\components\\CookListings.js":"15","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\utils\\AuthContext\\actions.js":"16","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\utils\\AuthContext\\context.js":"17","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\components\\Cook.js":"18","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\components\\ListingCard.js":"19","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\utils\\AuthContext\\reducer.js":"20"},{"size":276,"mtime":1610218014200,"results":"21","hashOfConfig":"22"},{"size":825,"mtime":1610819165696,"results":"23","hashOfConfig":"22"},{"size":3210,"mtime":1610593827255,"results":"24","hashOfConfig":"22"},{"size":3086,"mtime":1610594964451,"results":"25","hashOfConfig":"22"},{"size":561,"mtime":1610818474765,"results":"26","hashOfConfig":"22"},{"size":2396,"mtime":1610818474764,"results":"27","hashOfConfig":"22"},{"size":2285,"mtime":1610818474766,"results":"28","hashOfConfig":"22"},{"size":659,"mtime":1610818474769,"results":"29","hashOfConfig":"22"},{"size":9011,"mtime":1610907405131,"results":"30","hashOfConfig":"22"},{"size":4792,"mtime":1610818474764,"results":"31","hashOfConfig":"22"},{"size":363,"mtime":1610818474772,"results":"32","hashOfConfig":"22"},{"size":1443,"mtime":1610818474769,"results":"33","hashOfConfig":"22"},{"size":1079,"mtime":1610818474762,"results":"34","hashOfConfig":"22"},{"size":4909,"mtime":1610818474760,"results":"35","hashOfConfig":"22"},{"size":1222,"mtime":1610818474761,"results":"36","hashOfConfig":"22"},{"size":1649,"mtime":1610818474770,"results":"37","hashOfConfig":"22"},{"size":999,"mtime":1610818474771,"results":"38","hashOfConfig":"22"},{"size":1816,"mtime":1610818474760,"results":"39","hashOfConfig":"22"},{"size":773,"mtime":1610818474763,"results":"40","hashOfConfig":"22"},{"size":1711,"mtime":1610818474772,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1mdcdt9",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\index.js",[],["89","90"],"C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\App.js",[],"C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\pages\\Profile.js",[],["91","92"],"C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\pages\\Listings.js",[],"C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\pages\\Home.js",[],"C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\components\\NavigationBar.js",[],"C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\pages\\Login.js",[],"C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\routers\\PrivateRoute.js",[],"C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\pages\\Register.js",["93"],"import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { FormText, Container, Card, CardBody, Form, FormGroup, Label, Input, Button, Row, Col } from \"reactstrap\"\nimport API from \"../utils/API\";\n\n// TODO: Need logic to compare passwords within form\n// TODO: Show frontend error if a user attempts to signup twice\n// TODO: Now showing full register info? Probably in register thing\nfunction Register() {\n    const [registerUser, setRegisterUser] = useState({});\n    const history = useHistory();\n\n    const handleInputChange = (event) => {\n        const { name, value } = event.target;\n        setRegisterUser({ ...registerUser, [name]: value });\n    };\n\n\n    // image upload info source https://dev.to/asimdahall/client-side-image-upload-in-react-5ffc\n    const uploadedImage = React.useRef(null);\n    const imageUploader = React.useRef(null);\n    \n\n    // access the image file in the handleImageUpload method attached with onChange event\n    const handleImageUpload = e => {\n      const [file] = e.target.files; // gives access to the list of files uploaded via the file input we created (only one because we restricted # to one)\n      if (file) {\n        const reader = new FileReader();  // using the FileReader constructor in order to read the content of the file\n        const { current } = uploadedImage; // what does it do?\n        current.file = file;\n        reader.onload = e => {  //Attaching an onload event listener to the reader we created which when loaded will attach the file url it will read to the img element\n          current.src = e.target.result;\n        };\n        reader.readAsDataURL(file); // Read the file as URL and passs the file selected in it\n      }\n    };\n\n\n    // needs to pass on the info of the file image\n    // needs to decrease its size and go in between \n\n    const handleRegistration = (event) => {\n        event.preventDefault();\n        if (registerUser.firstName && registerUser.lastName && registerUser.email && registerUser.password) {\n            API.register({\n                firstName: registerUser.firstName,\n                lastName: registerUser.lastName,\n                email: registerUser.email,\n                password: registerUser.password,\n                specialties: registerUser.specialties,\n                bio: registerUser.bio,\n                cookImg: {imageUploader} // doesn't look like it is the right way to get the info?\n            }).then(() => {\n                setRegisterUser({});\n                history.push(\"/login\");\n            }).catch(err => console.log(err));\n        }\n    };\n\n    return <Container>\n        <Card>\n            <CardBody>\n                <h2 className=\"text-center mb-3\">Become a Homecook</h2>\n                <Form>\n                    <Row>\n                        <Col>\n                            <FormGroup>\n                                <Label for=\"firstName\">First Name</Label>\n                                <Input \n                                    className=\"form-control text-center\"\n                                    type=\"text\"\n                                    name=\"firstName\"\n                                    id=\"firstName\" \n                                    placeholder=\"First Name\"\n                                    onChange={handleInputChange}\n                                />\n                            </FormGroup>\n                        </Col>\n                        <Col>\n                            <FormGroup>\n                                <Label for=\"lastName\">Last Name</Label>\n                                <Input \n                                    className=\"form-control text-center\"\n                                    type=\"text\"\n                                    name=\"lastName\"\n                                    id=\"lastName\" \n                                    placeholder=\"Last Name\"\n                                    onChange={handleInputChange}\n                                />\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                    {/* <FormGroup>\n                        <Label for=\"fullName\">Full Name</Label>\n                        <Input \n                            className=\"form-control text-center\"\n                            type=\"text\"\n                            name=\"fullName\"\n                            id=\"fullName\" \n                            placeholder=\"Full Name\"\n                            onChange={handleInputChange}\n                        />\n                    </FormGroup> */}\n                    <FormGroup>\n                        <Label for=\"email\">Email</Label>\n                        <Input \n                            className=\"form-control text-center\" \n                            type=\"email\"\n                            name=\"email\"\n                            id=\"email\" \n                            placeholder=\"Email\"\n                            onChange={handleInputChange}\n                        />\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"password\">Password</Label>\n                        <Input \n                            className=\"form-control text-center\" \n                            type=\"password\"\n                            name=\"password\"\n                            id=\"password\" \n                            placeholder=\"Password\"\n                            onChange={handleInputChange}\n                        />\n                    </FormGroup>\n                    {/* <FormGroup>\n                        <Label for=\"confirm\">Confirm Password</Label>\n                        <Input \n                            className=\"form-control text-center\" \n                            type=\"password\"\n                            id=\"confirm\" \n                            placeholder=\"Confirm Password\"\n                            onChange={e => setRegisterPassword(e.target.value)}\n                        />\n                    </FormGroup> */}\n                    <FormGroup>\n                        <Label for=\"specialties\">Your Cooking Specialties</Label>\n                        <Input \n                            className=\"form-control text-center\" \n                            type=\"text\"\n                            name=\"specialties\"\n                            id=\"specialties\" \n                            placeholder=\"Southern, Comfort, Italian, Mexican, etc.\"\n                            onChange={handleInputChange}\n                        />\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"bio\">Short Bio</Label>\n                        <Input \n                            className=\"form-control text-center\" \n                            type=\"text\"\n                            name=\"bio\"\n                            id=\"bio\" \n                            placeholder=\"Write something for prospective buyers\"\n                            onChange={handleInputChange}\n                        />\n                    </FormGroup>\n                    <FormGroup>\n                    <Col xs={4}>\n                        <Label for=\"cookImg\">Cook Profile Image</Label>\n                        <Input \n                            \n                            className=\"form-control text-center\" \n                            type=\"file\"\n                            name=\"cookImg\"\n                            id=\"cookImg\"\n                            accept=\"image/*\"  // accepts only image\n                            multiple = \"false\" // accepts only one \n                            onChange={handleImageUpload}\n                            ref={imageUploader}\n                        />\n                       \n                        {/* showing the uploaded picture user is registering */}\n                                <img \n                                    ref={uploadedImage} // can disply image thanks to the useRef hook\n                                      style={{\n                                    width: \"1\",\n                                    height: \"1\",\n                                    position: \"relative\",\n                                    borderRadius: \"50%\"\n                                    }}\n                                />  \n\n                                \n                        </Col>\n                        \n                        <FormText color=\"muted\">\n                            Upload a profile image. Buyer's trust cooks they can see!\n                        </FormText>\n                    </FormGroup>\n                    <Button \n                        className=\"btn btn-primary btn-block mt-5\"\n                        type=\"submit\"\n                        onClick={handleRegistration}\n                    >\n                        Register\n                    </Button>\n                </Form>\n            </CardBody>\n        </Card>\n    </Container>\n};\n\nexport default Register;","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\pages\\Dash.js",[],"C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\utils\\AuthContext\\index.js",["94"],"// Modified from:\n// See https://soshace.com/react-user-login-authentication-using-usecontext-and-usereducer/\n// See https://github.com/nero2009/login-auth-useContext\n\nimport { login, logout, update } from \"./actions\";\nimport { AuthProvider, useAuthDispatch, useAuthState } from \"./context\";\n\nexport { AuthProvider, useAuthState, useAuthDispatch, login, logout };","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\utils\\API.js",[],"C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\components\\Cooks.js",[],"C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\components\\CookInfo.js",["95"],"import { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Card, CardImg, CardBody, CardTitle, CardSubtitle, CardText, Button, Modal, ModalHeader, ModalBody, Form, Row, Col, FormGroup, Label, Input } from \"reactstrap\";\nimport { useAuthState } from \"../utils/AuthContext\";\nimport API from \"../utils/API\";\n\nconst CookInfo = () => {\n    const [cookInfo, setCookInfo] = useState({});\n    const [updateInfo, setUpdateInfo] = useState({});\n    const [modal, setModal] = useState(false);\n    const history = useHistory();\n    const userDetails = useAuthState();\n    const toggle = () => setModal(!modal);\n\n    const getCookInfo = () => {\n        API.getCook(userDetails.user.id)\n            .then(res => setCookInfo(res.data))\n            .catch(err => console.log(err));\n    };\n\n    const handleInputChange = event => {\n        const { name, value } = event.target;\n        setUpdateInfo({ ...updateInfo, [name]: value });\n    };\n\n    const handleCookUpdate = event => {\n        event.preventDefault();\n\n        // TODO: How to get all these to resolve before we can get to getCookInfo()?\n\n        if (updateInfo.firstName) {\n            API.updateCook(userDetails.user.id, { firstName: updateInfo.firstName }).catch(err => console.log(err));\n        };\n\n        if (updateInfo.lastName) {\n            API.updateCook(userDetails.user.id, { lastName: updateInfo.lastName }).catch(err => console.log(err));\n        };\n\n        if (updateInfo.email) {\n            API.updateCook(userDetails.user.id, { email: updateInfo.email }).catch(err => console.log(err));\n        };\n\n        getCookInfo();\n        toggle();\n        history.replace(\"/\");\n        history.replace(\"/dash\");        \n    };\n\n    useEffect(() => {\n        getCookInfo();\n    }, []);\n\n    return (\n        <div>\n            <Card>\n                <CardImg top width=\"100%\" src={cookInfo.cookImg} alt={cookInfo.firstName} />\n                <CardBody>\n                    <CardTitle tag=\"h5\">{cookInfo.firstName} {cookInfo.lastName}</CardTitle>\n                    <CardSubtitle tag=\"h6\" className=\"mb-2 text-muted\">{cookInfo.specialities}</CardSubtitle>\n                    <CardText>{cookInfo.bio}</CardText>\n                    <Button onClick={toggle}>Edit</Button>\n                </CardBody>\n            </Card>\n            <Modal isOpen={modal} toggle={toggle}>\n                <ModalHeader toggle={toggle}>Edit Cook Profile</ModalHeader>\n                <ModalBody>\n                    <Form>\n                        <Row>\n                            <Col>\n                                <FormGroup>\n                                    <Label for=\"firstName\">First Name</Label>\n                                    <Input \n                                        className=\"form-control text-center\"\n                                        type=\"text\"\n                                        name=\"firstName\"\n                                        id=\"firstName\"\n                                        placeholder={cookInfo.firstName}\n                                        onChange={handleInputChange}\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col>\n                                <FormGroup>\n                                    <Label for=\"lastName\">Last Name</Label>\n                                    <Input \n                                        className=\"form-control text-center\"\n                                        type=\"text\"\n                                        name=\"lastName\"\n                                        id=\"lastName\"\n                                        placeholder={cookInfo.lastName}\n                                        onChange={handleInputChange}\n                                    />\n                                </FormGroup>\n                            </Col>\n                        </Row>\n                        <FormGroup>\n                            <Label for=\"email\">Email</Label>\n                            <Input \n                                className=\"form-control text-center\"\n                                type=\"email\"\n                                name=\"email\"\n                                id=\"email\"\n                                placeholder={cookInfo.email}\n                                onChange={handleInputChange}\n                            />\n                        </FormGroup>\n                        <Button \n                            className=\"btn btn-primary btn-block mt-5\"\n                            type=\"submit\"\n                            onClick={handleCookUpdate}\n                        >\n                            Update\n                        </Button>\n                    </Form>\n                </ModalBody>\n            </Modal>\n        </div>\n    );\n};\n\nexport default CookInfo;","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\components\\CookListings.js",[],"C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\utils\\AuthContext\\actions.js",[],"C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\utils\\AuthContext\\context.js",[],"C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\components\\Cook.js",["96","97","98","99"],"import { useState } from \"react\";\nimport { Modal, ModalHeader, ModalBody, Container, Row, Card, CardImg, CardBody, CardTitle, CardSubtitle, CardText, Button } from \"reactstrap\";\nimport ListingCard from \"./ListingCard\";\n\nconst Cook = (props) => {\n    const [modal, setModal] = useState(false);\n    const toggle = () => setModal(!modal);\n\n    return (\n        <div>\n            <Card>\n                {/* <CardImg top width=\"100%\" src={props.firstName} alt={props.firstName} /> */}\n                <CardBody>\n                    <CardTitle tag=\"h5\">{props.firstName} {props.lastName}</CardTitle>\n                    {/* <CardSubtitle tag=\"h6\" className=\"mb-2 text-muted\">{props.specialty}</CardSubtitle>\n                    <CardText>{props.description}</CardText> */}\n                    <Button onClick={toggle}>Shop Homecook</Button> \n                </CardBody>\n            </Card>\n            <Modal isOpen={modal} toggle={toggle}>\n                <ModalHeader className=\"text-center\" toggle={toggle}>{props.firstName}'s Kitchen</ModalHeader>\n                <ModalBody>\n                        {!props.listings\n                        ? <div>This homecook has no current listings.</div>\n                        : (props.listings.map(listing => (\n                            <Container fluid key={listing.id}>\n                                <ListingCard \n                                    previewImage={listing.previewImage}\n                                    food={listing.food}\n                                    price={listing.price}\n                                    description={listing.description}\n                                />\n                            </Container>\n                        )))}\n                </ModalBody>\n            </Modal>\n        </div>\n    );\n};\n\nexport default Cook;","C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\components\\ListingCard.js",[],"C:\\Users\\shern\\OneDrive\\Desktop\\Bootcamp\\hometohome\\client\\src\\utils\\AuthContext\\reducer.js",[],["100","101"],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"102","replacedBy":"106"},{"ruleId":"104","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":174,"column":33,"nodeType":"110","endLine":182,"endColumn":35},{"ruleId":"111","severity":1,"message":"112","line":5,"column":25,"nodeType":"113","messageId":"114","endLine":5,"endColumn":31},{"ruleId":"115","severity":1,"message":"116","line":51,"column":8,"nodeType":"117","endLine":51,"endColumn":10,"suggestions":"118"},{"ruleId":"111","severity":1,"message":"119","line":2,"column":52,"nodeType":"113","messageId":"114","endLine":2,"endColumn":55},{"ruleId":"111","severity":1,"message":"120","line":2,"column":63,"nodeType":"113","messageId":"114","endLine":2,"endColumn":70},{"ruleId":"111","severity":1,"message":"121","line":2,"column":93,"nodeType":"113","messageId":"114","endLine":2,"endColumn":105},{"ruleId":"111","severity":1,"message":"122","line":2,"column":107,"nodeType":"113","messageId":"114","endLine":2,"endColumn":115},{"ruleId":"102","replacedBy":"123"},{"ruleId":"104","replacedBy":"124"},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],["125"],["126"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'update' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCookInfo'. Either include it or remove the dependency array.","ArrayExpression",["127"],"'Row' is defined but never used.","'CardImg' is defined but never used.","'CardSubtitle' is defined but never used.","'CardText' is defined but never used.",["125"],["126"],"no-global-assign","no-unsafe-negation",{"desc":"128","fix":"129"},"Update the dependencies array to be: [getCookInfo]",{"range":"130","text":"131"},[1779,1781],"[getCookInfo]"]